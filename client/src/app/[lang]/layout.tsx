import "../globals.css";
import "swiper/css";
import "swiper/css/navigation";
import "aos/dist/aos.css";

import Header from "@/components/root/layout/header";
import Navbar from "@/components/root/layout/navbar";
import Footer from "@/components/root/layout/footer";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { cn } from "@/libs/utils";
import AOSProviderDynamic from "@/providers/aos-dynamic";
import { i18n, Locale } from "@/configs/i18n";
import { AppType } from "@/types/server";
import { getDictionary } from "@/utils/directory";
import eden from "@/libs/eden";
import Sidebar from "@/components/root/layout/sidebar";
import { TranslationsProvider } from "@/utils/translation-provider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Respublika Kengashi",
  description: "Generated by ByteSynergy",
  icons: "/img/logo.svg",
};

export const revalidate = 0;

export async function generateStaticParams() {
  return i18n.locales.map((lang) => ({
    lang,
  }));
}
export type MenuItem = {
  id: string;
  title: string;
  path: string;
  docCount?: number;
  sub_menu: MenuItem[];
  type?: AppType["~Routes"]["api"]["rest"]["menus"]["tree"]["get"]["response"]["200"][number]["type"];
  newsType?: AppType["~Routes"]["api"]["rest"]["menus"]["tree"]["get"]["response"]["200"][number]["newsType"];
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ lang: Locale }>;
}>) {
  const { lang } = await params;
  const t = await getDictionary(lang);

  const menu = await eden.menus.tree.get({
    query: {
      page: 1,
      filter: {
        lang,
        orderBy: "asc",
        parentId: null,
      },
    },
  });

  function mapMenuTree(
    menu: AppType["~Routes"]["api"]["rest"]["menus"]["tree"]["get"]["response"]["200"][number]
  ): MenuItem {
    return {
      type: menu.type,
      id: menu.id.toString(),
      title: menu.name,
      path: menu.path || "",
      newsType: menu.newsType,
      docCount: menu.type === "document" ? menu.files?.length : undefined,
      sub_menu: (menu.children || []).map(mapMenuTree),
    };
  }

  return (
    <html lang={lang} className="">
      <body
        className={cn(
          "antialiased flex flex-col min-h-screen",
          geistSans.variable,
          geistMono.variable
        )}
      >
        <AOSProviderDynamic>
          <TranslationsProvider dictionary={t}>
            <Header header_desc={t.header.description} lang={lang} menu={(menu.data || []).map(mapMenuTree)} />
            <Navbar menu={(menu.data || []).map(mapMenuTree)} lang={lang} />
            <Sidebar lang={lang} menu={(menu.data || [])?.map(mapMenuTree)} />
            <main className="py-5 max-md:p-0 ">{children}</main>
            <Footer lang={lang} />
          </TranslationsProvider>
        </AOSProviderDynamic>
      </body>
    </html>
  );
}
